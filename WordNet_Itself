import dsa.DiGraph;
import dsa.SeparateChainingHashST;
import dsa.Set;
import stdlib.In;
import stdlib.StdOut;

public class WordNet {
    //symbol table that maps synset noun to synset IDs-> st
    //ST that maps synset ID to synset String rst
    //Shortest common ancestor comp. SCA
    private SeparateChainingHashST<String, Set<Integer>> st;
    private SeparateChainingHashST<Integer, String> rst;
    private ShortestCommonAncestor sca;
    private DiGraph G; 

    // Constructs a WordNet object given the names of the input (synset and hypernym) files.
    public WordNet(String synsets, String hypernyms) {
        //The constructor should throw a NullPointerException() with the message "synsets is null" if synsets is null and the message
        //"hypernyms is null" if hypernyms is null.
        
        if (synsets == null) {
            throw new NullPointerException("synsets is null");
        }

        if (hypernyms == null) {
            throw new NullPointerException("hypernyms is null");
        }

        //init st and rst
        st = new SeparateChainingHashST<>();
        rst = new SeparateChainingHashST<>();


        In synsetsIn = new In(synsets);
        
        while (!synsetsIn.isEmpty()) {
            String[] fields = synsetsIn.readLine().split(",");
            
            int synsetId = Integer.parseInt(fields[0]);
            
            String synset = fields[1];
            
            rst.put(synsetId, synset);

            String[] nouns = synset.split(" ");
            
            for (String noun : nouns) {
                
                if (!st.contains(noun)) {

                    Set<Integer> synsetIds = new Set<>();
                    synsetIds.add(synsetId);
                    st.put(noun, synsetIds);
                } else {
                    st.get(noun).add(synsetId);
                }
            }
        }

        In hypernymsIn = new In(hypernyms);
       
        G = new DiGraph(st.size());
        
        while (!hypernymsIn.isEmpty()) {
            
            String[] fields = hypernymsIn.readLine().split(",");
            
            int sysnetId = Integer.parseInt(fields[0]);
            
            for (int i = 1; i < fields.length; i++) {
                
                int hypernymId = Integer.parseInt(fields[i]);
                
                G.addEdge(sysnetId, hypernymId);
            }
        }

        sca = new ShortestCommonAncestor(G);
    }

    // Returns all WordNet nouns.
    public Iterable<String> nouns() {
        return st.keys();
    }

    // Returns true if the given word is a WordNet noun, and false otherwise.
    public boolean isNoun(String word) {
        //The isNoun() method should throw a NullPointerException("word is null") if word is null.
        if (word == null) {
            throw new NullPointerException("word is null");
        }
        
        return st.contains(word);
    }

    // Returns a synset that is a shortest common ancestor of noun1 and noun2.
    public String sca(String noun1, String noun2) {
        //The sca() and distance() methods should throw a NullPointerException() with the message "noun1 is null" or "noun2 is null" if
        //noun1 or noun2 is null. The methods should throw an IllegalArgumentException() with the message "noun1 is not a noun" or
        //"noun2 is not a noun" if noun1 or noun2 is not a noun.
        if (noun1 == null) {
            throw new NullPointerException("noun1 is null");
        }
        
        if (noun2 == null) {
            throw new NullPointerException("noun2 is null");
        }

        if (!isNoun(noun1)) {
            throw new IllegalArgumentException("noun1 is not a noun");
        }
        
        if (!isNoun(noun2)) {
            throw new IllegalArgumentException("noun2 is not a noun");
        }

        Set<Integer> synsetIds1 = st.get(noun1);
        Set<Integer> synsetIds2 = st.get(noun2);
        
        int ancestorId = sca.ancestor(synsetIds1, synsetIds2);

        return rst.get(ancestorId);
    }

    // Returns the length of the shortest ancestral path between noun1 and noun2.
    public int distance(String noun1, String noun2) {
        //The sca() and distance() methods should throw a NullPointerException() with the message "noun1 is null" or "noun2 is null" if
        //noun1 or noun2 is null. The methods should throw an IllegalArgumentException() with the message "noun1 is not a noun" or
        //"noun2 is not a noun" if noun1 or noun2 is not a noun.
        
        if (noun1 == null) {
            throw new NullPointerException("noun1 is null");
        }
        
        if (noun2 == null) {
            throw new NullPointerException("noun2 is null");
        }

        if (!isNoun(noun1)) {
            throw new IllegalArgumentException("noun1 is not a noun");
        }
        
        if (!isNoun(noun2)) {
            throw new IllegalArgumentException("noun2 is not a noun");
        }

        Set<Integer> synsetIds1 = st.get(noun1);
        Set<Integer> synsetIds2 = st.get(noun2);
        
        return sca.length(synsetIds1, synsetIds2);
    }
    

    // Unit tests the data type. [DO NOT EDIT]
    public static void main(String[] args) {
        WordNet wordnet = new WordNet(args[0], args[1]);
        String word1 = args[2];
        String word2 = args[3];
        int nouns = 0;
        for (String noun : wordnet.nouns()) {
            nouns++;
        }
        StdOut.printf("# of nouns = %d\n", nouns);
        StdOut.printf("isNoun(%s)? %s\n", word1, wordnet.isNoun(word1));
        StdOut.printf("isNoun(%s)? %s\n", word2, wordnet.isNoun(word2));
        StdOut.printf("isNoun(%s %s)? %s\n", word1, word2, wordnet.isNoun(word1 + " " + word2));
        StdOut.printf("sca(%s, %s) = %s\n", word1, word2, wordnet.sca(word1, word2));
        StdOut.printf("distance(%s, %s) = %s\n", word1, word2, wordnet.distance(word1, word2));
    }
}
