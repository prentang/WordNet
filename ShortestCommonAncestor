import dsa.DiGraph;
import dsa.LinkedQueue;
import dsa.SeparateChainingHashST;
import stdlib.In;
import stdlib.StdIn;
import stdlib.StdOut;

public class ShortestCommonAncestor {
    private final DiGraph G;

    // Constructs a ShortestCommonAncestor object given a rooted DAG.
    public ShortestCommonAncestor(DiGraph G) {
        if (G == null) {
            throw new NullPointerException("G is null");
        }
        
        this.G = G;
    }

    // Returns length of the shortest ancestral path between vertices v and w.
    public int length(int v, int w) {
         if (v < 0 || v >= G.V() || w < 0 || w >= G.V()) {
        throw new IndexOutOfBoundsException((v < 0 || v >= G.V()) ? "v is invalid" : "w is invalid");
    }
        //return length of shortest ancestral path -> v and w
        int ancestor = ancestor(v , w);
        
        return distFrom(v).get(ancestor) + distFrom(w).get(ancestor);
    }

    // Returns a shortest common ancestor of vertices v and w.
    public int ancestor(int v, int w) {
        if (v < 0 || v >= G.V() || w < 0 || w >= G.V()) {
        throw new IndexOutOfBoundsException((v < 0 || v >= G.V()) ? "v is invalid" : "w is invalid");
    }
        //return shortest common ancestor of v and w
        
        SeparateChainingHashST<Integer, Integer> vDistFrom = distFrom(v);
        
        SeparateChainingHashST<Integer, Integer> wDistFrom = distFrom(w);
        
        int shortestDistance = Integer.MAX_VALUE;
        
        int shortestAncestor = -1;
        
        for (int u : wDistFrom.keys()) {
            
            if (vDistFrom.contains(u)) {
                
                int distance = vDistFrom.get(u) + wDistFrom.get(u);
                
                if (distance < shortestDistance) {
                    shortestDistance = distance;
                    shortestAncestor = u;
                }
            }
        }
        return shortestAncestor;
    }

    // Returns length of the shortest ancestral path of vertex subsets A and B.
    public int length(Iterable<Integer> A, Iterable<Integer> B) {
        if (A == null || B == null) {
        throw new NullPointerException((A == null) ? "A is null" : "B is null");
        }
        
        if (!A.iterator().hasNext() || !B.iterator().hasNext()) {
        throw new IllegalArgumentException((!A.iterator().hasNext()) ? "A is empty" : "B is empty");
        }
        
      
        int[] s = triad(A, B);
        
        int v = s[1];
        int w = s[2];
        
        SeparateChainingHashST<Integer, Integer> distsv = distFrom(v);
        SeparateChainingHashST<Integer, Integer> distsw = distFrom(w);
        
        int total = (distsv.get(s[0]) + distsw.get(s[0]));
        return total; 
    }

    // Returns a shortest common ancestor of vertex subsets A and B.
    public int ancestor(Iterable<Integer> A, Iterable<Integer> B) {
        if (A == null || B == null) {
        throw new NullPointerException((A == null) ? "A is null" : "B is null");
        }
        
        if (!A.iterator().hasNext() || !B.iterator().hasNext()) {
        throw new IllegalArgumentException((!A.iterator().hasNext()) ? "A is empty" : "B is empty");
        }
        
        int[] x = triad(A, B);
        
        return x[0];
    }

    // Returns a map of vertices reachable from v and their respective shortest distances from v.
    private SeparateChainingHashST<Integer, Integer> distFrom(int v) {
        
        SeparateChainingHashST<Integer, Integer> st = new SeparateChainingHashST<Integer, Integer>();
        LinkedQueue<Integer> queue = new LinkedQueue<Integer>();
        st.put(v, 0);
        queue.enqueue(v);
        
        while (!queue.isEmpty()){
            
            int x = queue.dequeue();
            
            for (int y : G.adj(x)){
                
                if (!st.contains(y)){
                    
                    st.put(y, st.get(x) + 1);
                    queue.enqueue(y);
                }
            }
        }
        return st;
    }

    // Returns an array consisting of a shortest common ancestor a of vertex subsets A and B,
    // vertex v from A, and vertex w from B such that the path v-a-w is the shortest ancestral
    // path of A and B.
    private int[] triad(Iterable<Integer> A, Iterable<Integer> B) {
        
        int shortestDistance = Integer.MAX_VALUE;
        int shortestAncestor = -1;
        
        int v = -1;
        int w = -1;
            for(int a : A) {
                
                for(int b : B){
                    
                    int distance = length(a, b);
                    
                    if (distance < shortestDistance){
                        shortestDistance = distance;
                        shortestAncestor = ancestor(a, b);
                        v = a;
                        w = b;
            }
        }
       }
        
       return new int[]{shortestAncestor, v, w};
      }

    // Unit tests the data type. [DO NOT EDIT]
    public static void main(String[] args) {
        In in = new In(args[0]);
        DiGraph G = new DiGraph(in);
        in.close();
        ShortestCommonAncestor sca = new ShortestCommonAncestor(G);
        while (!StdIn.isEmpty()) {
            int v = StdIn.readInt();
            int w = StdIn.readInt();
            int length = sca.length(v, w);
            int ancestor = sca.ancestor(v, w);
            StdOut.printf("length = %d, ancestor = %d\n", length, ancestor);
        }
    }
}
